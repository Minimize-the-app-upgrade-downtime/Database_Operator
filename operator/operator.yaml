# CustomResourceDefinition config/crd/base/databaselogic.example.com_logics
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.3.0
  creationTimestamp: null
  name: logics.databaselogic.example.com
spec:
  group: databaselogic.example.com
  names:
    kind: Logic
    listKind: LogicList
    plural: logics
    singular: logic
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      description: Logic is the Schema for the logics API
      properties:
        apiVersion:
          description:
            "APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
          type: string
        kind:
          description:
            "Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
          type: string
        metadata:
          type: object
        spec:
          description: LogicSpec defines the desired state of Logic
          properties:
            appVersion:
              description: EPF application version. Default value "<empty>".
              type: string
            appimage:
              description: Uses the EPF image for the deployment. Default value "<empty>".
              type: string
            appname:
              description: Use the App name Image identyfy the app Default value "<empty>".
              type: string
            databaseVersion:
              description: EPF Database version. Default value "<empty>".
              type: string
            sideCarImage:
              description: Uses the proxy deployment.(Go proxy) Default value "<empty>".
              type: string
            sideCarName:
              description: Uses the proxy deploment for proxy name Default value "<empty>".
              type: string
            size:
              description:
                'INSERT ADDITIONAL SPEC FIELDS - desired state of cluster
                Important: Run "make" to regenerate code after modifying this file
                Replica count of the DatabaseLogic.'
              format: int32
              maximum: 10
              minimum: 1
              type: integer
          type: object
        status:
          description: LogicStatus defines the observed state of Logic
          properties:
            availableReplicas:
              format: int32
              type: integer
            podNames:
              description:
                'INSERT ADDITIONAL STATUS FIELD - define observed state
                of cluster Important: Run "make" to regenerate code after modifying
                this file'
              items:
                type: string
              type: array
          required:
            - availableReplicas
            - podNames
          type: object
      type: object
  version: v1alpha1
  versions:
    - name: v1alpha1
      served: true
      storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []



---
# config/rbac/leader_election_role.yaml
# permissions to do leader election.
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: database-operator-leader-election-role
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps/status
  verbs:
  - get
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch


#ClusterRole


---
# bind - manager role config/rbac/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: database-operator-manager-role
rules:
- apiGroups:
  - databaselogic.example.com
  resources:
  - logics
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - databaselogic.example.com
  resources:
  - logics/status
  verbs:
  - get
  - patch
  - update


---
# config/rbac/auth_proxy_client_clusterrole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: database-operator-metrics-reader
rules:
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]


---
#config/rbac/auth_proxy_role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: database-operator-proxy-role
rules:
- apiGroups: ["authentication.k8s.io"]
  resources:
  - tokenreviews
  verbs: ["create"]
- apiGroups: ["authorization.k8s.io"]
  resources:
  - subjectaccessreviews
  verbs: ["create"]


#cluster role binding


---
#config/rbac/auth_proxy_role_binding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: database-operator-proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: proxy-role
subjects:
- kind: ServiceAccount
  name: default
  namespace: system


---
# config/rbac/ role_binding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: database-operator-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: manager-role
subjects:
- kind: ServiceAccount
  name: default
  namespace: system


#rolebinding

---
#config/rbac/leader_election_role_binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: leader-election-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: leader-election-role
subjects:
- kind: ServiceAccount
  name: default
  namespace: system


# Deployment
---
#config/manager/manager.yaml  && config/defult/manager_auth_proxy_patch.yaml
# operator deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
  creationTimestamp: null
  name: database-operator-controller-manager
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: controller-manager
  template:
    metadata:
      creationTimestamp: null
      labels:
        control-plane: controller-manager
    spec:
      containers:
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=10
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.5.0
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        resources: {}
      - args:
        - --metrics-addr=127.0.0.1:8080
        - --enable-leader-election
        command:
        - /manager
        image: 2016csc044/samples:v1 #operator Image and version
        name: manager
        resources:
          limits:
            cpu: 100m
            memory: 30Mi
          requests:
            cpu: 100m
            memory: 20Mi
      terminationGracePeriodSeconds: 10



#service

---
#config/rbac/auth_proxy_service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    control-plane: controller-manager
  name: database-operator-controller-manager-metrics-service
spec:
  ports:
  - name: https
    port: 8443
    targetPort: https
  selector:
    control-plane: controller-manager

